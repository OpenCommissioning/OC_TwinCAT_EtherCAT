<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Sercos_VC" Id="{af44cc7e-f0f0-0ecd-2e68-1f1a148f9c51}" SpecialFunc="None">
    <Declaration><![CDATA[(*
	Sercos Velocity Control
	MDT: S-0-0134 Master control word
	MDT: S-0-0036 Velocity command value
	AT: S-0-0135 Drive Status word
	AT: S-0-0051 Position feedback 1 value
*)

{attribute 'reflection'} 
FUNCTION_BLOCK FB_Sercos_VC EXTENDS FB_LinkDataReal 
VAR_INPUT
	pControl			: PVOID; //Pocess data from fieldbus, 4 BYTES FROM FIELDBUS
	pStatus				: PVOID; //Pocess data to fieldbus, 4 BYTES FROM FIELDBUS		
	stControl	 		: ST_Sercos_VC_Control;
	stConfig			: ST_Sercos_VC_Config;
	bSTO 				: BOOL := TRUE;
END_VAR

VAR_OUTPUT
	stStatus 			: ST_Sercos_VC_Status;	
END_VAR

VAR		
	{attribute 'instance-path'} 
    {attribute 'noinit'} 
    _sPath 				: STRING;
	_fbStateMachine 	: FB_Sercos_FSM;
	_fbEncoder 			: FB_Encoder;	
	_fVelocity			: REAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();
InitRun();

GetControlData();
Cycle();
SetStatusData();]]></ST>
    </Implementation>
    <Method Name="Cycle" Id="{c8a20f0e-e5d6-0aa0-3038-c78418cf796b}">
      <Declaration><![CDATA[METHOD PRIVATE Cycle
VAR
	fTargetVelocitySign : REAL;
	fTargetVelocityFactor : REAL;
	fTargetVelocity : REAL;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_fbStateMachine.bPower := bSTO;

_fbStateMachine.stControl := stControl.nControlWord;
_fbStateMachine();
stStatus.nStatusWord := _fbStateMachine.stStatus;

IF (_fbStateMachine._eState = E_Sercos_State.S5a_DriveInOperation OR _fbStateMachine._eState = E_Sercos_State.S5b_Halt) THEN	
	_fbEncoder.fValue := _fVelocity := GetTargetVelocity(stControl.nVelocityCommand, stConfig.fReferenceVelocity, stConfig.fNormalizationFactor);	
	_fbEncoder();
END_IF

stStatus.nStatusWord.b8_Reserved := stControl.nControlWord.b8_Reserved;
stStatus.nStatusWord.b9_Reserved := stControl.nControlWord.b9_Reserved;
stStatus.nStatusWord.b10_OperationMode := stControl.nControlWord.b11_Reserved;

stStatus.nPositionFeedback := _fbEncoder.nResult;

//Set Link Data
IF stConfig.bIsLinkOutputVelocity THEN
	ControlData := LREAL_TO_REAL(_fVelocity);
ELSE
	ControlData := LREAL_TO_REAL(_fbEncoder.fResult);
END_IF





]]></ST>
      </Implementation>
    </Method>
    <Property Name="eState" Id="{d45a8940-08b6-074b-216c-16f7e2ec2ae3}">
      <Declaration><![CDATA[PROPERTY eState : E_Sercos_State]]></Declaration>
      <Get Name="Get" Id="{9599c54a-0d61-09c1-16fa-3bf8f7df8d51}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eState := _fbStateMachine.eState;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="fbEncoder" Id="{2f841845-75fd-0f04-10ed-700b7b5cd592}">
      <Declaration><![CDATA[PROPERTY PUBLIC fbEncoder : REFERENCE TO FB_Encoder]]></Declaration>
      <Get Name="Get" Id="{b77e54d7-d63d-0916-3079-10729a2fcd79}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[fbEncoder REF= _fbEncoder;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="GetControlData" Id="{09604953-9e7d-0831-01dc-a634392734f5}">
      <Declaration><![CDATA[METHOD INTERNAL GetControlData]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pControl <= 0 OR stConfig.bForceMode THEN RETURN; END_IF

(*Control Word*)
F_Memcpy(ADR(stControl), pControl, 2, stConfig.bSwapProcessData);
(*Velocity Command*)
F_Memcpy(ADR(stControl) + 2, pControl + 2, 4, stConfig.bSwapProcessData);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTargetVelocity" Id="{a44fd583-a4cc-0a99-3de8-851a14ead549}">
      <Declaration><![CDATA[METHOD INTERNAL GetTargetVelocity : REAL
VAR_INPUT
	nVelocityCommand 			: DINT;
	fReferenceVelocity			: REAL;
	nNormalizationFactor 		: REAL;
END_VAR

VAR
	fTargetVelocity 			: REAL;	
	fTargetVelocitySign 		: REAL;
	fTargetVelocityFactor 		: REAL;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fTargetVelocity := DINT_TO_REAL(nVelocityCommand);
fTargetVelocityFactor := F_Norm(0, nNormalizationFactor, ABS(fTargetVelocity));
GetTargetVelocity := fReferenceVelocity * fTargetVelocityFactor * F_Sign(fTargetVelocity);]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitRun" Id="{1fe27c8c-3927-0ba7-1bd7-929479e7f3e2}">
      <Declaration><![CDATA[METHOD PRIVATE InitRun
VAR_INST
	bInitRun : BOOL := TRUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInitRun THEN RETURN; END_IF
bInitRun := FALSE;

IF pControl = 0 OR pStatus = 0 THEN
	ADSLOGSTR(ADSLOG_MSGTYPE_WARN, '%s', CONCAT(_sPath, ' PLC IO is not assigned!'));	
END_IF

_fbEncoder.stConfig.bIsIntegrator := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Motion" Id="{18570ffa-4d1c-00f0-3312-0eb759ec3dbe}">
      <Declaration><![CDATA[METHOD PRIVATE Motion : REAL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetStatusData" Id="{1157c9c4-2255-0c23-0c1a-6639b3a53cd8}">
      <Declaration><![CDATA[METHOD INTERNAL SetStatusData]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pStatus <= 0 THEN RETURN; END_IF

(*StatusWord*)
F_Memcpy(pStatus, ADR(stStatus), 2, stConfig.bSwapProcessData);
(*Position Feedback*)
F_Memcpy(pStatus + 2, ADR(stStatus) + 2, 4, stConfig.bSwapProcessData);



]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>